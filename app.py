# -*- coding: utf-8 -*-
"""Graficos Dashboard_Olimpiadas_ChatGPT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14E5pd_5V7T3w7RjrukfLbnAwkIA5guCG
"""

# !pip install dash
# !pip install dash-core-components
# !pip install dash-html-components
# !pip install plotly
# !pip install pandas

#Passo 1 -> Lendo os dados e realizando o tratamento

import pandas as pd
import plotly.express as px
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash import Input, Output, dcc, html

# Load the CSV file
df=pd.read_csv('/content/Summer_olympic_Medals.csv')
# Replace 'United States' with 'United States of America' in the 'Country_Name' column
df['Country_Name'] = df['Country_Name'].replace('United States', 'United States of America')

import plotly.express as px

df

#Passo 2: Plotando gráfico de Mapa

# Filtre os dados entre 1992 e 2020
df = df [( df['Year'] >= 1992) & ( df ['Year'] <= 2020)]

# Calcula o total de medalhas para cada país
df [ 'Total_Medals' ] = df [ 'Gold' ] + df [ 'Silver' ] + df [ 'Bronze' ]
df_country_medals = df.groupby('Country_Name')['Total_Medals'].sum().reset_index()

# Gera um mapa gráfico
map_fig = px.choropleth(df_country_medals,
                    locations= 'Country_Name' ,      # Coluna DataFrame com nomes de países
                    locationmode= 'country names' ,
                    color= 'Total_Medals' ,          # Coluna DataFrame com valores de cor
                    hover_name= 'Country_Name' ,     # Coluna DataFrame hover info
                    color_continuous_scale=px.colors.sequential.YlOrRd,   # Defina a escala de cores
                    title= 'Total de medalhas de 1992 a 2020' )   # Título do enredo
map_fig.show()

df

#Passo 3 -> Plotando gráfico de área dos 10 paises com maior número de medalhas

# Crie um gráfico de área empilhado para os 10 principais países por contagem total de medalhas
top_countries = df_country_medals.groupby('Country_Name')['Total_Medals'].sum().nlargest(10).index
top_countries

df_countries = df.groupby(['Country_Name', 'Year'])['Total_Medals'].sum().reset_index()
df_countries

df_top_10_countries = df_countries[df_countries['Country_Name'].isin(top_countries)]
df_top_10_countries

area_fig = px.area(df_top_10_countries,
                   x= "Year" ,
                   y= "Total_Medals",
                   color= "Country_Name",
                   title= 'Top 10 Países por contagem total de medalhas de 1992 a 2020' )

area_fig.show()

# Crie um aplicativo Dash
app = dash.Dash(__name__)


# Defina o layout
app.layout = html.Div(children=[
    dcc.Graph(figure=map_fig),
    dcc. Graph(figure=area_fig)
])

# Execute o aplicativo
if __name__ == '__main__' :
    app.run( debug = False )  #com debug=True -> fica ativado o modo debug e exibindo as mensagens de erro

#Passo 4 -> Plotando gráfico de Barra com os 10 paises com maior número de medalhas de ouro

# Crie um gráfico de área empilhado para os 10 principais países por contagem total de medalhas
df_top_countries_gold = df.groupby('Country_Name')['Gold'].sum().nlargest(10).reset_index()
df_top_countries_gold

# Create a bar chart for the top 10 countries with most gold medals

bar_fig = px.bar(df_top_countries_gold, x='Country_Name', y='Gold', title='Top 10 Countries with Most Gold Medals from 1992 to 2020')
bar_fig.show()

#Passo 5 -> Estilazando a tela com color_discrete_sequence = gold

bar_fig = px.bar(df_top_countries_gold, x='Country_Name', y='Gold', color_discrete_sequence=['gold'], title='Top 10 Countries with Most Gold Medals from 1992 to 2020')
bar_fig.show()

# Create a Dash Application
app = dash.Dash(__name__)

# Define the layout
app.layout = html.Div([
    dcc.Graph(figure=map_fig, id='map'),
    html.Div([
        dcc.Graph(figure=area_fig, id='area-chart'),
        dcc.Graph(figure=bar_fig, id='bar-chart')
    ], style={'display': 'flex'})
])


# Execute o aplicativo
if __name__ == '__main__' :
    app.run( debug = False )  #com debug=True -> fica ativado o modo debug e exibindo as mensagens de erro

#Passo 5 -> Estizando a tela com ajuste do mapa dentro do container div

# Create a Dash Application
app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Graph(figure=map_fig, id='map', style={'height': '50vh', 'width': '100%'}),
    html.Div([
        dcc.Graph(figure=area_fig, id='area-chart'),
        dcc.Graph(figure=bar_fig, id='bar-chart')
    ], style={'display': 'flex'})
])

# Execute o aplicativo
if __name__ == '__main__' :
    app.run( debug = False )  #com debug=True -> fica ativado o modo debug e exibindo as mensagens de erro

# Cores das medalhas
medal_colors = {
    'Gold': '#FFD700',
    'Silver': '#C0C0C0',
    'Bronze': '#CD7F32'
}

# Estilo padrão dos gráficos
default_layout = dict(
    paper_bgcolor='#f9f9f9',
    plot_bgcolor='#ffffff',
    font=dict(color='#333', size=14),
    margin=dict(l=40, r=20, t=40, b=30),
    legend=dict(bgcolor='rgba(0,0,0,0)', borderwidth=0)
)

# Inicialização do app
app = Dash(__name__)

# Layout da aplicação
app.layout = html.Div(
    style={'display': 'flex', 'flex-direction': 'row', 'flex-wrap': 'wrap'},
    children=[
        html.H1('Olimpíadas de Verão', style={'width': '100%', 'text-align': 'center'}),

        html.Div([
            html.H2('Filtro por País'),
            html.Label('Selecione o país:'),
            dcc.Dropdown(
                id='country-dropdown',
                options=[{'label': country, 'value': country} for country in df['Country_Name'].unique()],
                value=df['Country_Name'].iloc[0]
            ),
            dcc.Graph(id='pie-chart')
        ], style={'width': '32%', 'display': 'inline-block', 'margin-right': '1%'}),

        html.Div([
            html.H2('Gráfico de Área'),
            html.Label('Selecione a medalha:'),
            dcc.RadioItems(
                id='medal-radio-area',
                options=[
                    {'label': 'Todos', 'value': 'All'},
                    {'label': 'Ouro', 'value': 'Gold'},
                    {'label': 'Prata', 'value': 'Silver'},
                    {'label': 'Bronze', 'value': 'Bronze'}
                ],
                value='All',
                labelStyle={'display': 'block', 'margin-bottom': '10px'}
            ),
            dcc.Graph(id='area-chart')
        ], style={'width': '32%', 'display': 'inline-block', 'margin-right': '1%'}),

        html.Div([
            html.H2('Gráfico de Barra'),
            html.Label('Selecione o ano:'),
            dcc.Dropdown(
                id='year-dropdown',
                options=[{'label': year, 'value': year} for year in sorted(df['Year'].unique())],
                value=sorted(df['Year'].unique())[0],
                style={'width': '100%'}
            ),
            html.Label('Selecione a medalha:'),
            dcc.RadioItems(
                id='medal-radio-bar',
                options=[
                    {'label': 'Todos', 'value': 'All'},
                    {'label': 'Ouro', 'value': 'Gold'},
                    {'label': 'Prata', 'value': 'Silver'},
                    {'label': 'Bronze', 'value': 'Bronze'}
                ],
                value='All',
                labelStyle={'display': 'block', 'margin-bottom': '10px'}
            ),
            dcc.Graph(id='bar-chart')
        ], style={'width': '32%', 'display': 'inline-block'})
    ]
)

# ---------------- CALLBACKS ----------------

# Pie Chart
@app.callback(
    Output('pie-chart', 'figure'),
    Input('country-dropdown', 'value')
)
def update_pie_chart(selected_country):
    filtered_df = df[df['Country_Name'] == selected_country]
    values = [filtered_df['Gold'].sum(), filtered_df['Silver'].sum(), filtered_df['Bronze'].sum()]
    labels = ['Ouro', 'Prata', 'Bronze']

    fig = px.pie(
        names=labels,
        values=values,
        title=f'Total de Medalhas - {selected_country}',
        color=labels,
        color_discrete_map={
            'Ouro': medal_colors['Gold'],
            'Prata': medal_colors['Silver'],
            'Bronze': medal_colors['Bronze']
        }
    )
    fig.update_layout(default_layout)
    return fig

# Area Chart
@app.callback(
    Output('area-chart', 'figure'),
    Input('medal-radio-area', 'value')
)
def update_area_chart(selected_medal):
    if selected_medal == 'All':
        df_grouped = df.groupby('Year')[['Gold', 'Silver', 'Bronze']].sum().reset_index()
        fig = px.area(
            df_grouped,
            x='Year',
            y=['Gold', 'Silver', 'Bronze'],
            title='Evolução das Medalhas',
            color_discrete_map=medal_colors
        )
    else:
        df_grouped = df.groupby('Year')[[selected_medal]].sum().reset_index()
        fig = px.area(
            df_grouped,
            x='Year',
            y=selected_medal,
            title=f'Evolução das Medalhas de {selected_medal} ao Longo dos Anos',
            color_discrete_sequence=[medal_colors[selected_medal]]
        )

    fig.update_layout(default_layout)
    return fig

# Bar Chart
@app.callback(
    Output('bar-chart', 'figure'),
    [Input('year-dropdown', 'value'),
     Input('medal-radio-bar', 'value')]
)
def update_bar_chart(selected_year, selected_medal):
    df_filtered = df[df['Year'] == selected_year]

    if selected_medal == 'All':
        df_grouped = df_filtered.groupby('Country_Name')[['Gold', 'Silver', 'Bronze']].sum().reset_index()
        df_melted = df_grouped.melt(
            id_vars='Country_Name',
            value_vars=['Gold', 'Silver', 'Bronze'],
            var_name='Medalha',
            value_name='Total'
        )
        fig = px.bar(
            df_melted,
            x='Country_Name',
            y='Total',
            color='Medalha',
            title=f'Medalhas por País - {selected_year}',
            color_discrete_map=medal_colors
        )
    else:
        df_grouped = df_filtered.groupby('Country_Name')[[selected_medal]].sum().reset_index()
        fig = px.bar(
            df_grouped,
            x='Country_Name',
            y=selected_medal,
            title=f'Medalhas de {selected_medal} por País - {selected_year}',
            color_discrete_sequence=[medal_colors[selected_medal]]
        )

    fig.update_layout(default_layout, xaxis_tickangle=-45)
    return fig

# ---------------- EXECUÇÃO ----------------

if __name__ == '__main__':
    app.run(debug=True)